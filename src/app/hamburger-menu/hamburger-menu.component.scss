/* Universal box-sizing should ideally be in src/styles.scss for global application */
:host ::ng-deep *,
:host ::ng-deep *:before,
:host ::ng-deep *:after {
  box-sizing: border-box;
}

/* Base styling for the animated hamburger menu component */
.hamburger {
  -webkit-transform: scale(1);
  transform: scale(1);
  margin: 40px auto; /* You might want to make this configurable via @Input() */
  position: relative;
  display: block; /* Default to block for desktop, but we'll hide it below */
  width: 50px; /* Original width */
  height: 50px; /* Original height */
  background: #973BE8; /* Consider making this a variable or @Input() for customization */
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;

  /* Initially hide the menu for desktop */
  display: none;
}

/* Styles for positioning the entire component within its column context */
/* This class will be on a wrapper around your <app-hamburger-menu> component */
.hamburger-menu-column {
  /* This will be placed on a wrapper div *outside* your component */
  /* This ensures the positioning relative to its parent container */
  position: absolute;
  left: 82%;
  top: 35%;
  /* You may need to adjust these values based on your layout */
}


/* --- Responsive Styles for Mobile Visibility and Sizing --- */
@media (max-width: 768px) {
  .hamburger {
    display: block; /* Show the hamburger menu on mobile */
    /* Adjust size for mobile if desired, keeping aspect ratio */
    width: 50px;
    height: 50px;
    border-radius: 10%; /* Apply rounded corners as in your new styles */
    overflow: hidden; /* Important for the rounded shape */
    margin: 0; /* Remove auto margin for specific positioning */
    background: #973BE8; /* Assuming the SVG or inner elements provide the color */
     z-index: 1000;
  }

  /*
    The following inner styles (`span`, `.mobile-menu`, `&.active`) are for a DIFFERENT HTML structure.
    Your current HTML uses .burger-main, .burger-inner, .top, .mid, .bot (which are spans).
    We need to map these concepts to your existing HTML.
    
    If you want the "three bar" animation, the original SVG animation will conflict.
    I'll assume you want the *positioning/visibility* from the new styles,
    but keep the *animation behavior* from the original SVG.
  */
}


/* --- Original Animated Hamburger Menu Styles (continue as before) --- */
.burger-main {
  position: absolute;
  padding: 10px 10px;
  height: 50px;
  width: 50px;
  /* Adjust sizing if .hamburger is scaled down */
  // If .hamburger becomes 50px, these might need scaling too.
  // For simplicity, let's assume the inner elements adapt or you scale them.
  // E.g., transform: scale(0.735); // 50/68
}

.burger-inner {
  position: relative;
  height: 28px;
  width: 36px;
}

.burger-main span {
  position: absolute;
  display: block;
  height: 4px;
  width: 36px;
  border-radius: 2px;
  background: #fff;
}

.top {
  top: 0;
  transform-origin: 34px 2px;
}

.bot {
  bottom: 0;
  transform-origin: 34px 2px;
}

.mid {
  top: 12px;
}

.path {
  stroke-dasharray: 240;
  stroke-dashoffset: 240;
  stroke-linejoin: round;
}

.hamburger.open .path {
  animation: dash-in 0.6s linear normal forwards;
}

.hamburger.closed .path {
  animation: dash-out 0.6s linear normal forwards;
}

.hamburger.open .top {
  animation: close-top-out 0.6s linear normal forwards;
}

.hamburger.open .bot {
  animation: close-bot-out 0.6s linear normal forwards;
}

.hamburger.closed .top {
  animation: close-top-in 0.6s linear normal forwards;
}

.hamburger.closed .bot {
  animation: close-bot-in 0.6s linear normal forwards;
}

.hamburger.open .mid {
  animation: burger-fill-out 0.6s linear normal forwards;
}

.hamburger.closed .mid {
  animation: burger-fill-in 0.6s linear normal forwards;
}

.path-burger {
  position: absolute;
  top: 0;
  left: 0;
  height: 68px;
  width: 68px;
  /* Adjust path to your local assets folder if you download mask.svg */
  -webkit-mask: url(/assets/mask.svg);
  mask: url(/assets/mask.svg);
}

.animate-path {
  position: absolute;
  top: 0;
  left: 0;
  width: 68px;
  height: 68px;
}

.path-rotation {
  height: 34px;
  width: 34px;
  margin: 34px 34px 0 0;
  -webkit-transform: rotate(0deg);
  transform: rotate(0deg);
  -webkit-transform-origin: 100% 0;
  transform-origin: 100% 0;
}

.path-rotation:before {
  content: '';
  display: block;
  width: 30px;
  height: 34px;
  margin: 0 4px 0 0;
  background: #fff;
}

.hamburger.open .animate-path {
  animation: circle-in 0.6s linear normal forwards;
}

.hamburger.closed .animate-path {
  animation: circle-out 0.6s linear normal forwards;
}

/* Keyframes */
@keyframes dash-in {
  0% { stroke-dashoffset: 240; }
  40% { stroke-dashoffset: 240; }
  100% { stroke-dashoffset: 0; }
}
@keyframes dash-out {
  0% { stroke-dashoffset: 0; }
  40% { stroke-dashoffset: 240; }
  100% { stroke-dashoffset: 240; }
}
@keyframes close-top-out {
  0% { left: 0; top: 0; transform: rotate(0deg); }
  20% { left: 0; top: 0; transform: rotate(15deg); }
  80% { left: -5px; top: 0; transform: rotate(-60deg); }
  100% { left: -5px; top: 1px; transform: rotate(-45deg); }
}
@keyframes close-bot-out {
  0% { left: 0; transform: rotate(0deg); }
  20% { left: 0; transform: rotate(-15deg); }
  80% { left: -5px; transform: rotate(60deg); }
  100% { left: -5px; transform: rotate(45deg); }
}
@keyframes close-top-in {
  0% { left: -5px; bottom: 0; transform: rotate(-45deg); }
  20% { left: -5px; bottom: 0; transform: rotate(-60deg); }
  80% { left: 0; bottom: 0; transform: rotate(15deg); }
  100% { left: 0; bottom: 1px; transform: rotate(0deg); }
}
@keyframes close-bot-in {
  0% { left: -5px; transform: rotate(45deg); }
  20% { left: -5px; transform: rotate(60deg); }
  80% { left: 0; transform: rotate(-15deg); }
  100% { left: 0; transform: rotate(0deg); }
}
@keyframes burger-fill-in {
  0% { width: 0; left: 36px; }
  40% { width: 0; left: 40px; }
  80% { width: 36px; left: -6px; }
  100% { width: 36px; left: 0px; }
}
@keyframes burger-fill-out {
  0% { width: 36px; left: 0px; }
  20% { width: 42px; left: -6px; }
  40% { width: 0; left: 40px; }
  100% { width: 0; left: 36px; }
}
@keyframes circle-out {
  0% { transform: rotate(0deg); }
  40% { transform: rotate(180deg); }
  100% { transform: rotate(360deg); }
}
@keyframes circle-in {
  0% { transform: rotate(360deg); }
  40% { transform: rotate(180deg); }
  100% { transform: rotate(0deg); }
}
